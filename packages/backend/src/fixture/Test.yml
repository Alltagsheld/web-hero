entity: Test
items:
  test0:
    task: '@task0'
    fileName: /tests/challenge.test.tsx
    content: "import React from \"react\";\nimport '@testing-library/jest-dom'\nimport { render, screen } from \"@testing-library/react\";\nimport { HeroCards } from \"src/components/HeroCards/HeroCards.tsx\";\n\nconst setup = {appConfig: jest.fn()}\nObject.defineProperty(window, 'setup', setup);\n\nconst superheroes = [\n  {\n    name: \"Superman\",\n    powers: [\"flight\", \"laser beams\", \"x-ray vision\"],\n  },\n  {\n    name: \"Wonder Woman\",\n    powers: [\"super strength\", \"agility\", \"combat skills\"],\n  },\n  {\n    name: \"Batman\",\n    powers: [\"intelligence\", \"fighting skills\", \"gadgets\"],\n  },\n];\n\ndescribe(\"HeroCards\", () => {\n  it.each(superheroes)(\"renders the list of superhero cards\", (superhero) => {\n   render(<HeroCards superheroes={superheroes} />);\n expect(screen.getByText(superhero.name)).toBeInTheDocument();\n superhero.powers.forEach((power) => { expect(screen.getByText(power)).toBeInTheDocument(); }); });\n});\n"
  test1:
    task: '@task1'
    fileName: /tests/challenge.test.tsx
    content: "import React from \"react\";\nimport \"@testing-library/jest-dom\";\nimport \"@testing-library/jest-dom/extend-expect\";\nimport { render, screen, fireEvent } from \"@testing-library/react\";\nimport { BattleSimulator } from \"src/components/BattleSimulator/BattleSimulator.tsx\";\n\nconst contestants = [\n  {\n    name: \"The Joker\",\n    strength: 4,\n    intelligence: 8,\n    speed: 7,\n  },\n  {\n    name: \"Thanos\",\n    strength: 10,\n    intelligence: 5,\n    speed: 3,\n  },\n  {\n    name: \"General Zod\",\n    strength: 7,\n    intelligence: 9,\n    speed: 8,\n  },\n  {\n    name: \"Reacto\",\n    strength: 8,\n    intelligence: 6,\n    speed: 6,\n  },\n];\n\nasync function selectTwoOpponents() {\n  const opponentOne = screen.getByText(\"Reacto\");\n  fireEvent.click(opponentOne);\n  const opponentTwo = screen.getByText(\"General Zod\");\n  fireEvent.click(opponentTwo);\n}\n\ndescribe(\"BattleSimulator\", () => {\n  it.each(contestants)(\"renders the simulator\", (contestant) => {\n    render(<BattleSimulator contestants={contestants} />);\n    expect(screen.getByText(contestant.name)).toBeInTheDocument();\n    expect(\n      screen.getByText(`strength: ${contestant.strength}`)\n    ).toBeInTheDocument();\n    expect(\n      screen.getByText(`intelligence: ${contestant.intelligence}`)\n    ).toBeInTheDocument();\n    expect(screen.getByText(`speed: ${contestant.speed}`)).toBeInTheDocument();\n  });\n  it(\"selects 2 opponents by clicking on them\", async () => {\n    render(<BattleSimulator contestants={contestants} />);\n    await selectTwoOpponents();\n    const resultingElement = screen.getByText(\"Reacto VS General Zod\");\n    expect(resultingElement).toBeInTheDocument();\n  });\n  it(\"calculates the Winner of two opponents\", async () => {\n    render(<BattleSimulator contestants={contestants} />);\n    await selectTwoOpponents();\n    const button = screen.getByText(\"FIGHT\");\n    fireEvent.click(button);\n    const resultingElement = screen.getByText(\"Winner: Reacto\");\n    expect(resultingElement).toBeInTheDocument();\n  });\n  it(\"resets the fight by click on the reset button\", async () => {\n    render(<BattleSimulator contestants={contestants} />);\n    await selectTwoOpponents();\n    const fightButton = screen.getByText(\"FIGHT\");\n    fireEvent.click(fightButton);\n    const fightResult = screen.getByText(\"Winner: Reacto\");\n    expect(fightResult).toBeInTheDocument();\n    const resetButton = screen.getByText(\"RESET\");\n    fireEvent.click(resetButton);\n    expect(fightResult).not.toBeInTheDocument();\n  });\n});"
  test2:
    task: '@task2'
    fileName: /tests/challenge.test.tsx
    content: "import React from \"react\";\nimport \"@testing-library/jest-dom\";\nimport { render, screen } from \"@testing-library/react\";\nimport { YourComponent } from \"src/components/YourComponent/YourComponent.tsx\";\n\nconst testId = \"myDiv\";\ndescribe(\"testComponent\", () => {\n  it(\"renders the component with testId\", () => {\n    render(<YourComponent />);\n    const element = screen.getByTestId(testId);\n    expect(element).toBeInTheDocument();\n  });\n});\n"
  test3:
    task: '@task3'
    fileName: /tests/challenge.test.tsx
    content:  "import React from \"react\";\nimport \"@testing-library/jest-dom\";\nimport { render, screen } from \"@testing-library/react\";\nimport { FileUpload } from \"src/components/FileUpload/FileUpload.tsx\";\n\ndescribe(\"FileUploadField\", () => {\n  render(<FileUpload />);\n\n  it(\"should render a label and a file input field\", () => {\n    const element = screen.getByRole(\"input\");\n    expect(element).toBeInTheDocument();\n  });\n\n  it(\"should not show preview if no image has been selected\", () => {\n    const image = screen.getByRole(\"img\");\n    expect(image).not.toBeInTheDocument();\n  });\n\n  it(\"should render preview after image has been selected\", async () => {\n    const file = new File([new ArrayBuffer(1)], \"file.jpg\");\n\n    await waitFor(() =>\n      fireEvent.change(uploader, {\n        target: { files: [file] },\n      })\n    );\n\n    const image = screen.getByRole(\"img\");\n    expect(image).toBeInTheDocument();\n    expect(image).toHaveAttribute(\"src\", \"image content\");\n  });\n});\n"
  test4:
    task: '@task4'
    fileName: /tests/challenge.test.tsx
    content: "import React from \"react\";\nimport \"@testing-library/jest-dom\";\nimport { render, screen } from \"@testing-library/react\";\nimport { GalleryView } from \"src/components/GalleryView/GalleryView.tsx\";\n\nconst testId = \"gallery-view\";\n\ndescribe(\"Gallery View\", () => {\n  it(\"renders the Gallery View\", () => {\n    render(<GalleryView />);\n    const element = screen.getByTestId(testId);\n    expect(element).toBeInTheDocument();\n  });\n\n  it('renders the correct number of images', () => {\n    const images = ['image1.jpg', 'image2.jpg', 'image3.jpg'];\n    const renderedImages = screen.getAllByRole(\"img\");\n    expect(renderedImages.length).toBe(3);\n  });\n});\n"
